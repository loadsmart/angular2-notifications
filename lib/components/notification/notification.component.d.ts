import { NgZone, OnDestroy, OnInit, ChangeDetectorRef } from '@angular/core';
import { DomSanitizer, SafeHtml } from '@angular/platform-browser';
import { NotificationAnimationType } from '../../enums/notification-animation-type.enum';
import { Notification } from '../../interfaces/notification.type';
import { NotificationsService } from '../../services/notifications.service';
import * as i0 from "@angular/core";
export declare class NotificationComponent implements OnInit, OnDestroy {
    private notificationService;
    private domSanitizer;
    private cd;
    private zone;
    timeOut: number;
    showProgressBar: boolean;
    pauseOnHover: boolean;
    clickToClose: boolean;
    clickIconToClose: boolean;
    maxLength: number;
    theClass: string;
    rtl: boolean;
    animate: NotificationAnimationType;
    position: number;
    item: Notification;
    title: any;
    content: any;
    titleIsTemplate: boolean;
    contentIsTemplate: boolean;
    htmlIsTemplate: boolean;
    progressWidth: number;
    safeSvg: SafeHtml;
    safeInputHtml: SafeHtml;
    private stopTime;
    private timer;
    private framesPerSecond;
    private sleepTime;
    private startTime;
    private endTime;
    private pauseStart;
    private icon;
    constructor(notificationService: NotificationsService, domSanitizer: DomSanitizer, cd: ChangeDetectorRef, zone: NgZone);
    ngOnInit(): void;
    ngOnDestroy(): void;
    startTimeOut(): void;
    onEnter(): void;
    onLeave(): void;
    onClick(event: MouseEvent): void;
    onClickIcon(event: MouseEvent): void;
    attachOverrides(): void;
    private instance;
    private remove;
    private contentType;
    static ɵfac: i0.ɵɵFactoryDeclaration<NotificationComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NotificationComponent, "simple-notification", never, { "timeOut": { "alias": "timeOut"; "required": false; }; "showProgressBar": { "alias": "showProgressBar"; "required": false; }; "pauseOnHover": { "alias": "pauseOnHover"; "required": false; }; "clickToClose": { "alias": "clickToClose"; "required": false; }; "clickIconToClose": { "alias": "clickIconToClose"; "required": false; }; "maxLength": { "alias": "maxLength"; "required": false; }; "theClass": { "alias": "theClass"; "required": false; }; "rtl": { "alias": "rtl"; "required": false; }; "animate": { "alias": "animate"; "required": false; }; "position": { "alias": "position"; "required": false; }; "item": { "alias": "item"; "required": false; }; }, {}, never, never, false, never>;
}
